{"version":3,"sources":["../node_modules/home-on-the-range/index.js","../Dicebox/preMade2.js","preBuiltDiceGames/standardDice/standard.js"],"names":["PreMadeDice2","name","sidesOnDice","div","document","createElement","classList","add","boxName","textContent","subTitle","diceArea","rollButton","id","append","querySelector","addEventListener","rollDice","parentElement","firstChild","diceRoll","Standard","dicebox1","dicebox2","diceArray","dicebox","create","rolls","querySelectorAll","roll","createDice"],"mappings":"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":"standard.46cabdb1.js","sourceRoot":"..\\src","sourcesContent":["h = {\r\n    range: function(firstNumber, secondNumber) {\r\n \r\n        if (firstNumber < 0 && secondNumber === undefined) {\r\n            secondNumber = 0;\r\n            return makeArray(firstNumber, secondNumber);\r\n        } \r\n        \r\n        else if (secondNumber === undefined) {\r\n            secondNumber = firstNumber;\r\n            firstNumber = 0;\r\n            return makeArray(firstNumber, secondNumber);\r\n        } \r\n        \r\n        else if (firstNumber <= secondNumber) {\r\n            return makeArray(firstNumber, secondNumber);\r\n        } \r\n        \r\n        else if (firstNumber >= secondNumber) {\r\n            return makeReverseArray(firstNumber, secondNumber);\r\n        }\r\n    \r\n        return rangeArray;\r\n    },\r\n    \r\n    // adds strings and numbers\r\n    add: function(...numbers) {\r\n        let numbersFlattened = numbers.reduce((accumulator, currentValue) => accumulator.concat(currentValue), []);\r\n\r\n        let numbersToBeSummed = numbersFlattened.map((item) => Number(item));\r\n        \r\n    \r\n        let sum = numbersToBeSummed.reduce((accumulator, currentValue) => accumulator + currentValue);\r\n        return sum;\r\n    },\r\n    \r\n    // complete array flatten\r\n    deep: function(...arrays) {\r\n        let levelArray = [];\r\n        for (let i = 0; i < arrays.length; i++) {\r\n            if(!Array.isArray(arrays[i])) {\r\n                levelArray.push(arrays[i]);\r\n                continue;\r\n            }\r\n            let newArray = arrays[i].flat(Infinity);\r\n            levelArray.push(newArray);\r\n        }\r\n        let flatArray = levelArray.flat();\r\n        return flatArray;\r\n    },\r\n\r\n    // \r\n    createFibArray: function(numToReach) {\r\n        let firstNum = BigInt(1);\r\n        let secondNum = BigInt(1);\r\n        let total = 0;\r\n        let fibArray = [];\r\n        let count = 0;\r\n        fibArray.push(BigInt(total));\r\n        fibArray.push(firstNum);\r\n        fibArray.push(secondNum);\r\n        while(true) {\r\n            total = BigInt(firstNum + secondNum);\r\n            if (count < numToReach) {\r\n                fibArray.push(total);\r\n                firstNum = BigInt(secondNum);\r\n                secondNum = BigInt(total);\r\n                count++;\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        return fibArray;\r\n    },\r\n    getPrimeFactors: function(number) {\r\n        let primeArray = [];\r\n        let i = 2;\r\n        while(i < 1000000) {\r\n            if (number % i === 0) {\r\n                primeArray.push(i);\r\n                number /= i;\r\n                i = 2;\r\n            }\r\n            else {\r\n                i++;\r\n            }\r\n        }\r\n        return primeArray;\r\n    },\r\n\r\n    findLargestPrimeFactor: function(number) {\r\n        let primeArray = this.getPrimeFactors(number);\r\n        let largestPrime = Math.max(...primeArray);\r\n        return largestPrime;\r\n    },\r\n\r\n    findSmallestPrimeFactor: function(number) {\r\n        let primeArray = this.getPrimeFactors(number);\r\n        let smallestPrime = Math.min(...primeArray);\r\n        return smallestPrime;\r\n    },\r\n\r\n    numIsPalindrome: function(number) {\r\n        let newNumber = String(number).split('');\r\n        let numToCheck = Math.floor(newNumber.length / 2);\r\n        for (let i = 0; i <= numToCheck; i++) {\r\n            if (newNumber[i] == newNumber[newNumber.length - i - 1]) {\r\n                if (i == numToCheck) {\r\n                    return true;\r\n                }\r\n                continue;\r\n            }\r\n            break;\r\n        }\r\n        return false;\r\n    },\r\n\r\n    findLCM: function(...args) {\r\n        let newArray = this.deep(args);\r\n        let numArray = newArray.map(item => Number(item));\r\n        let found = false;\r\n        let answer = 2;\r\n        while (found === false) {\r\n            found = numArray.every(item => {\r\n                return answer % item === 0;\r\n            });\r\n            if (found === true) return answer;\r\n            answer++;\r\n        }\r\n        return answer;\r\n    },\r\n\r\n    findNthPrime: function(number) {\r\n        let count = 0;\r\n        let rangeArray = h.range(2, 50000000);\r\n        for (let item of rangeArray) {\r\n            let isPrime = true;\r\n            for (i = 2; i <= Math.sqrt(item); i++){\r\n                if(item % i === 0 && item != i){\r\n                   isPrime = false;\r\n                }\r\n             }\r\n            if (isPrime === true) {\r\n                count++;\r\n                if (count === number) {\r\n                    return item;\r\n                }\r\n            }\r\n        }\r\n        return primeArray;\r\n    },\r\n\r\n    getPrimeArray: function(...args) {\r\n        let primeArray = [];\r\n        if (args.length === 1) {\r\n            args[1] = args[0];\r\n            args[0] = 2;\r\n        }\r\n        let rangeArray = h.range(args[0], args[1]);\r\n        for (let item of rangeArray) {\r\n            let isPrime = true;\r\n            for (i = 2; i <= Math.sqrt(item); i++){\r\n                if(item % i === 0 && item != i){\r\n                   isPrime = false;\r\n                }\r\n             }\r\n            if (isPrime === true) {\r\n                primeArray.push(item);\r\n            }\r\n        }\r\n        return primeArray;\r\n    },\r\n\r\n    isPrime: function(number) {\r\n        for (i = 2; i <= Math.sqrt(number); i++){\r\n            if(number % i === 0 && number != i){\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    },\r\n\r\n    shuffle: function(array) {\r\n        for (let i = array.length - 1; i > 0; i--) {\r\n            let j = Math.floor(Math.random() * (i + 1));\r\n            [array[i], array[j]] = [array[j], array[i]];\r\n        }\r\n        return array;\r\n    },\r\n\r\n    count: function(arr, item) {\r\n        let count = 0;\r\n\r\n        for(let i = 0; i < arr.length; i++) {\r\n            if(arr[i] === item) {\r\n                count += 1;\r\n            }\r\n        }\r\n        return count;\r\n    },\r\n    removeDuplicates: function(arr) {\r\n        let uniques = [];\r\n        for (item of arr) {\r\n            if(uniques.indexOf(item) === -1) {\r\n                uniques.push(item);\r\n            }\r\n        }\r\n        return uniques;\r\n    },\r\n    randomInt: function(min, max) {\r\n        return Math.floor(Math.random() * (max - min + 1) + min);\r\n    },\r\n    randomChoice: function(array) {\r\n        let chosenInt = Math.floor(Math.random() * array.length);\r\n        return array[chosenInt];\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// Helper functions\r\n\r\n// Range helper -------------------------------------------------------------------------------\r\nfunction makeArray (firstNumber, secondNumber) {\r\n    let rangeArray = [];\r\n    for (let i = firstNumber; i <= secondNumber; i++) {\r\n        rangeArray.push(i);\r\n    }   \r\n    return rangeArray;\r\n}\r\n\r\nfunction makeReverseArray(firstNumber, secondNumber) {\r\n    let rangeArray = [];\r\n    for (let i = firstNumber; i >= secondNumber; i--) {\r\n        rangeArray.push(i);\r\n    }\r\n    return rangeArray;\r\n}\r\n// ------------------------------------------------------------------------------------------\r\n\r\nmodule.exports = h;","import { randomInt, randomChoice } from 'home-on-the-range';\r\n\r\nclass PreMadeDice2 {\r\n    constructor(name, sidesOnDice) {\r\n        this.name = name;\r\n        this.sidesOnDice = sidesOnDice;\r\n    }\r\n\r\n    create() {\r\n        let div = document.createElement('div');\r\n        div.classList.add('text-center', 'created-dice-box');\r\n        let boxName = document.createElement('h4');\r\n        boxName.textContent = this.name;\r\n        let subTitle = document.createElement('p');\r\n        subTitle.textContent = `(${this.sidesOnDice} sided Dice)`;\r\n        let diceArea = document.createElement('h4');\r\n        diceArea.classList.add('dice-area');\r\n        diceArea.textContent = '???';\r\n        let rollButton = document.createElement('button');\r\n        rollButton.classList.add('btn', 'btn-primary');\r\n        rollButton.textContent = 'Roll the Dice';\r\n        rollButton.id = 'roll-button';\r\n        div.append(boxName);\r\n        div.append(subTitle);\r\n        div.append(diceArea);\r\n        div.append(rollButton);\r\n        document.querySelector('#dice-box').append(div);\r\n        rollButton.addEventListener('click', () => {\r\n            this.rollDice(diceArea);\r\n        });\r\n    }\r\n\r\n    rollDice(diceArea) {\r\n        if (diceArea.parentElement.firstChild.textContent === 'Percentile Rolls') {\r\n            let diceRoll = randomChoice([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]);\r\n            diceArea.textContent = diceRoll;\r\n        } else {\r\n            let diceRoll = randomInt(1, this.sidesOnDice);\r\n            diceArea.textContent = diceRoll;\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport { PreMadeDice2 }","import { randomInt } from 'home-on-the-range';\r\nimport { PreMadeDice2 } from '../../../Dicebox/preMade2';\r\n\r\nclass Standard {\r\n    static createDice() {\r\n        let dicebox1 = new PreMadeDice2('Dice 1', 6);\r\n        let dicebox2 = new PreMadeDice2('Dice 2', 6);\r\n\r\n        let diceArray = [dicebox1, dicebox2];\r\n        for (let dicebox of diceArray) {\r\n            dicebox.create();\r\n        }\r\n        this.rollDice();\r\n    }\r\n\r\n    static rollDice() {\r\n        document.querySelector('#standard-button').addEventListener('click', () => {\r\n            let rolls = document.querySelectorAll('.dice-area');\r\n            for (let roll of rolls) {\r\n                roll.textContent = randomInt(1, 6);\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n\r\nStandard.createDice();"]}