{"version":3,"sources":["../node_modules/home-on-the-range/index.js","../Dicebox/preMade2.js","preBuiltDiceGames/d&d/d&d.js"],"names":["PreMadeDice2","name","sidesOnDice","div","document","createElement","classList","add","boxName","textContent","subTitle","diceArea","rollButton","id","append","querySelector","addEventListener","rollDice","parentElement","firstChild","diceRoll","DungeonsAndDragons","dicebox1","dicebox2","dicebox3","dicebox4","dicebox5","dicebox6","dicebox7","diceArray","dicebox","create","createDice"],"mappings":"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":"d&d.5fa037d8.js","sourceRoot":"..\\src","sourcesContent":["h = {\r\n    range: function(firstNumber, secondNumber) {\r\n \r\n        if (firstNumber < 0 && secondNumber === undefined) {\r\n            secondNumber = 0;\r\n            return makeArray(firstNumber, secondNumber);\r\n        } \r\n        \r\n        else if (secondNumber === undefined) {\r\n            secondNumber = firstNumber;\r\n            firstNumber = 0;\r\n            return makeArray(firstNumber, secondNumber);\r\n        } \r\n        \r\n        else if (firstNumber <= secondNumber) {\r\n            return makeArray(firstNumber, secondNumber);\r\n        } \r\n        \r\n        else if (firstNumber >= secondNumber) {\r\n            return makeReverseArray(firstNumber, secondNumber);\r\n        }\r\n    \r\n        return rangeArray;\r\n    },\r\n    \r\n    // adds strings and numbers\r\n    add: function(...numbers) {\r\n        let numbersFlattened = numbers.reduce((accumulator, currentValue) => accumulator.concat(currentValue), []);\r\n\r\n        let numbersToBeSummed = numbersFlattened.map((item) => Number(item));\r\n        \r\n    \r\n        let sum = numbersToBeSummed.reduce((accumulator, currentValue) => accumulator + currentValue);\r\n        return sum;\r\n    },\r\n    \r\n    // complete array flatten\r\n    deep: function(...arrays) {\r\n        let levelArray = [];\r\n        for (let i = 0; i < arrays.length; i++) {\r\n            if(!Array.isArray(arrays[i])) {\r\n                levelArray.push(arrays[i]);\r\n                continue;\r\n            }\r\n            let newArray = arrays[i].flat(Infinity);\r\n            levelArray.push(newArray);\r\n        }\r\n        let flatArray = levelArray.flat();\r\n        return flatArray;\r\n    },\r\n\r\n    // \r\n    createFibArray: function(numToReach) {\r\n        let firstNum = BigInt(1);\r\n        let secondNum = BigInt(1);\r\n        let total = 0;\r\n        let fibArray = [];\r\n        let count = 0;\r\n        fibArray.push(BigInt(total));\r\n        fibArray.push(firstNum);\r\n        fibArray.push(secondNum);\r\n        while(true) {\r\n            total = BigInt(firstNum + secondNum);\r\n            if (count < numToReach) {\r\n                fibArray.push(total);\r\n                firstNum = BigInt(secondNum);\r\n                secondNum = BigInt(total);\r\n                count++;\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        return fibArray;\r\n    },\r\n    getPrimeFactors: function(number) {\r\n        let primeArray = [];\r\n        let i = 2;\r\n        while(i < 1000000) {\r\n            if (number % i === 0) {\r\n                primeArray.push(i);\r\n                number /= i;\r\n                i = 2;\r\n            }\r\n            else {\r\n                i++;\r\n            }\r\n        }\r\n        return primeArray;\r\n    },\r\n\r\n    findLargestPrimeFactor: function(number) {\r\n        let primeArray = this.getPrimeFactors(number);\r\n        let largestPrime = Math.max(...primeArray);\r\n        return largestPrime;\r\n    },\r\n\r\n    findSmallestPrimeFactor: function(number) {\r\n        let primeArray = this.getPrimeFactors(number);\r\n        let smallestPrime = Math.min(...primeArray);\r\n        return smallestPrime;\r\n    },\r\n\r\n    numIsPalindrome: function(number) {\r\n        let newNumber = String(number).split('');\r\n        let numToCheck = Math.floor(newNumber.length / 2);\r\n        for (let i = 0; i <= numToCheck; i++) {\r\n            if (newNumber[i] == newNumber[newNumber.length - i - 1]) {\r\n                if (i == numToCheck) {\r\n                    return true;\r\n                }\r\n                continue;\r\n            }\r\n            break;\r\n        }\r\n        return false;\r\n    },\r\n\r\n    findLCM: function(...args) {\r\n        let newArray = this.deep(args);\r\n        let numArray = newArray.map(item => Number(item));\r\n        let found = false;\r\n        let answer = 2;\r\n        while (found === false) {\r\n            found = numArray.every(item => {\r\n                return answer % item === 0;\r\n            });\r\n            if (found === true) return answer;\r\n            answer++;\r\n        }\r\n        return answer;\r\n    },\r\n\r\n    findNthPrime: function(number) {\r\n        let count = 0;\r\n        let rangeArray = h.range(2, 50000000);\r\n        for (let item of rangeArray) {\r\n            let isPrime = true;\r\n            for (i = 2; i <= Math.sqrt(item); i++){\r\n                if(item % i === 0 && item != i){\r\n                   isPrime = false;\r\n                }\r\n             }\r\n            if (isPrime === true) {\r\n                count++;\r\n                if (count === number) {\r\n                    return item;\r\n                }\r\n            }\r\n        }\r\n        return primeArray;\r\n    },\r\n\r\n    getPrimeArray: function(...args) {\r\n        let primeArray = [];\r\n        if (args.length === 1) {\r\n            args[1] = args[0];\r\n            args[0] = 2;\r\n        }\r\n        let rangeArray = h.range(args[0], args[1]);\r\n        for (let item of rangeArray) {\r\n            let isPrime = true;\r\n            for (i = 2; i <= Math.sqrt(item); i++){\r\n                if(item % i === 0 && item != i){\r\n                   isPrime = false;\r\n                }\r\n             }\r\n            if (isPrime === true) {\r\n                primeArray.push(item);\r\n            }\r\n        }\r\n        return primeArray;\r\n    },\r\n\r\n    isPrime: function(number) {\r\n        for (i = 2; i <= Math.sqrt(number); i++){\r\n            if(number % i === 0 && number != i){\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    },\r\n\r\n    shuffle: function(array) {\r\n        for (let i = array.length - 1; i > 0; i--) {\r\n            let j = Math.floor(Math.random() * (i + 1));\r\n            [array[i], array[j]] = [array[j], array[i]];\r\n        }\r\n        return array;\r\n    },\r\n\r\n    count: function(arr, item) {\r\n        let count = 0;\r\n\r\n        for(let i = 0; i < arr.length; i++) {\r\n            if(arr[i] === item) {\r\n                count += 1;\r\n            }\r\n        }\r\n        return count;\r\n    },\r\n    removeDuplicates: function(arr) {\r\n        let uniques = [];\r\n        for (item of arr) {\r\n            if(uniques.indexOf(item) === -1) {\r\n                uniques.push(item);\r\n            }\r\n        }\r\n        return uniques;\r\n    },\r\n    randomInt: function(min, max) {\r\n        return Math.floor(Math.random() * (max - min + 1) + min);\r\n    },\r\n    randomChoice: function(array) {\r\n        let chosenInt = Math.floor(Math.random() * array.length);\r\n        return array[chosenInt];\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// Helper functions\r\n\r\n// Range helper -------------------------------------------------------------------------------\r\nfunction makeArray (firstNumber, secondNumber) {\r\n    let rangeArray = [];\r\n    for (let i = firstNumber; i <= secondNumber; i++) {\r\n        rangeArray.push(i);\r\n    }   \r\n    return rangeArray;\r\n}\r\n\r\nfunction makeReverseArray(firstNumber, secondNumber) {\r\n    let rangeArray = [];\r\n    for (let i = firstNumber; i >= secondNumber; i--) {\r\n        rangeArray.push(i);\r\n    }\r\n    return rangeArray;\r\n}\r\n// ------------------------------------------------------------------------------------------\r\n\r\nmodule.exports = h;","import { randomInt, randomChoice } from 'home-on-the-range';\r\n\r\nclass PreMadeDice2 {\r\n    constructor(name, sidesOnDice) {\r\n        this.name = name;\r\n        this.sidesOnDice = sidesOnDice;\r\n    }\r\n\r\n    create() {\r\n        let div = document.createElement('div');\r\n        div.classList.add('text-center', 'created-dice-box');\r\n        let boxName = document.createElement('h4');\r\n        boxName.textContent = this.name;\r\n        let subTitle = document.createElement('p');\r\n        subTitle.textContent = `(${this.sidesOnDice} sided Dice)`;\r\n        let diceArea = document.createElement('h4');\r\n        diceArea.classList.add('dice-area');\r\n        diceArea.textContent = '???';\r\n        let rollButton = document.createElement('button');\r\n        rollButton.classList.add('btn', 'btn-primary');\r\n        rollButton.textContent = 'Roll the Dice';\r\n        rollButton.id = 'roll-button';\r\n        div.append(boxName);\r\n        div.append(subTitle);\r\n        div.append(diceArea);\r\n        div.append(rollButton);\r\n        document.querySelector('#dice-box').append(div);\r\n        rollButton.addEventListener('click', () => {\r\n            this.rollDice(diceArea);\r\n        });\r\n    }\r\n\r\n    rollDice(diceArea) {\r\n        if (diceArea.parentElement.firstChild.textContent === 'Percentile Rolls') {\r\n            let diceRoll = randomChoice([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]);\r\n            diceArea.textContent = diceRoll;\r\n        } else {\r\n            let diceRoll = randomInt(1, this.sidesOnDice);\r\n            diceArea.textContent = diceRoll;\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport { PreMadeDice2 }","import { PreMadeDice2 } from '../../../Dicebox/preMade2';\r\n\r\nclass DungeonsAndDragons {\r\n    static createDice() {\r\n        let dicebox1 = new PreMadeDice2('D4 - Tetrahedron', 4);\r\n        let dicebox2 = new PreMadeDice2('D6 - The Cube', 6);\r\n        let dicebox3 = new PreMadeDice2('D8 - Octahedron', 8);\r\n        let dicebox4 = new PreMadeDice2('D10 - Tetrahedron', 10);\r\n        let dicebox5 = new PreMadeDice2('Percentile Rolls', 10);\r\n        let dicebox6 = new PreMadeDice2('D12 - Dodecahedron', 12);\r\n        let dicebox7 = new PreMadeDice2('D20 - Icosahedron', 20);\r\n\r\n        let diceArray = [dicebox1, dicebox2, dicebox3, dicebox4, dicebox5, dicebox6, dicebox7];\r\n        for (let dicebox of diceArray) {\r\n            dicebox.create();\r\n        }\r\n    }\r\n}\r\n\r\n\r\nDungeonsAndDragons.createDice();"]}