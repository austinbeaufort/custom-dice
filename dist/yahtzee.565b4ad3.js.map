{"version":3,"sources":["../node_modules/home-on-the-range/index.js","../Dicebox/preMade.js","preBuiltDiceGames/Yahtzee/yahtzee.js"],"names":["PreMadeDice","name","sidesOnDice","diceRoll","div","document","createElement","classList","add","boxName","textContent","subTitle","diceArea","append","querySelector","Yahtzee","diceArray","i","length","create","rollDice","addEventListener","rolls","querySelectorAll","createDice"],"mappings":"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","file":"yahtzee.565b4ad3.js","sourceRoot":"..\\src","sourcesContent":["h = {\r\n    range: function(firstNumber, secondNumber) {\r\n \r\n        if (firstNumber < 0 && secondNumber === undefined) {\r\n            secondNumber = 0;\r\n            return makeArray(firstNumber, secondNumber);\r\n        } \r\n        \r\n        else if (secondNumber === undefined) {\r\n            secondNumber = firstNumber;\r\n            firstNumber = 0;\r\n            return makeArray(firstNumber, secondNumber);\r\n        } \r\n        \r\n        else if (firstNumber <= secondNumber) {\r\n            return makeArray(firstNumber, secondNumber);\r\n        } \r\n        \r\n        else if (firstNumber >= secondNumber) {\r\n            return makeReverseArray(firstNumber, secondNumber);\r\n        }\r\n    \r\n        return rangeArray;\r\n    },\r\n    \r\n    // adds strings and numbers\r\n    add: function(...numbers) {\r\n        let numbersFlattened = numbers.reduce((accumulator, currentValue) => accumulator.concat(currentValue), []);\r\n\r\n        let numbersToBeSummed = numbersFlattened.map((item) => Number(item));\r\n        \r\n    \r\n        let sum = numbersToBeSummed.reduce((accumulator, currentValue) => accumulator + currentValue);\r\n        return sum;\r\n    },\r\n    \r\n    // complete array flatten\r\n    deep: function(...arrays) {\r\n        let levelArray = [];\r\n        for (let i = 0; i < arrays.length; i++) {\r\n            if(!Array.isArray(arrays[i])) {\r\n                levelArray.push(arrays[i]);\r\n                continue;\r\n            }\r\n            let newArray = arrays[i].flat(Infinity);\r\n            levelArray.push(newArray);\r\n        }\r\n        let flatArray = levelArray.flat();\r\n        return flatArray;\r\n    },\r\n\r\n    // \r\n    createFibArray: function(numToReach) {\r\n        let firstNum = BigInt(1);\r\n        let secondNum = BigInt(1);\r\n        let total = 0;\r\n        let fibArray = [];\r\n        let count = 0;\r\n        fibArray.push(BigInt(total));\r\n        fibArray.push(firstNum);\r\n        fibArray.push(secondNum);\r\n        while(true) {\r\n            total = BigInt(firstNum + secondNum);\r\n            if (count < numToReach) {\r\n                fibArray.push(total);\r\n                firstNum = BigInt(secondNum);\r\n                secondNum = BigInt(total);\r\n                count++;\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        return fibArray;\r\n    },\r\n    getPrimeFactors: function(number) {\r\n        let primeArray = [];\r\n        let i = 2;\r\n        while(i < 1000000) {\r\n            if (number % i === 0) {\r\n                primeArray.push(i);\r\n                number /= i;\r\n                i = 2;\r\n            }\r\n            else {\r\n                i++;\r\n            }\r\n        }\r\n        return primeArray;\r\n    },\r\n\r\n    findLargestPrimeFactor: function(number) {\r\n        let primeArray = this.getPrimeFactors(number);\r\n        let largestPrime = Math.max(...primeArray);\r\n        return largestPrime;\r\n    },\r\n\r\n    findSmallestPrimeFactor: function(number) {\r\n        let primeArray = this.getPrimeFactors(number);\r\n        let smallestPrime = Math.min(...primeArray);\r\n        return smallestPrime;\r\n    },\r\n\r\n    numIsPalindrome: function(number) {\r\n        let newNumber = String(number).split('');\r\n        let numToCheck = Math.floor(newNumber.length / 2);\r\n        for (let i = 0; i <= numToCheck; i++) {\r\n            if (newNumber[i] == newNumber[newNumber.length - i - 1]) {\r\n                if (i == numToCheck) {\r\n                    return true;\r\n                }\r\n                continue;\r\n            }\r\n            break;\r\n        }\r\n        return false;\r\n    },\r\n\r\n    findLCM: function(...args) {\r\n        let newArray = this.deep(args);\r\n        let numArray = newArray.map(item => Number(item));\r\n        let found = false;\r\n        let answer = 2;\r\n        while (found === false) {\r\n            found = numArray.every(item => {\r\n                return answer % item === 0;\r\n            });\r\n            if (found === true) return answer;\r\n            answer++;\r\n        }\r\n        return answer;\r\n    },\r\n\r\n    findNthPrime: function(number) {\r\n        let count = 0;\r\n        let rangeArray = h.range(2, 50000000);\r\n        for (let item of rangeArray) {\r\n            let isPrime = true;\r\n            for (i = 2; i <= Math.sqrt(item); i++){\r\n                if(item % i === 0 && item != i){\r\n                   isPrime = false;\r\n                }\r\n             }\r\n            if (isPrime === true) {\r\n                count++;\r\n                if (count === number) {\r\n                    return item;\r\n                }\r\n            }\r\n        }\r\n        return primeArray;\r\n    },\r\n\r\n    getPrimeArray: function(...args) {\r\n        let primeArray = [];\r\n        if (args.length === 1) {\r\n            args[1] = args[0];\r\n            args[0] = 2;\r\n        }\r\n        let rangeArray = h.range(args[0], args[1]);\r\n        for (let item of rangeArray) {\r\n            let isPrime = true;\r\n            for (i = 2; i <= Math.sqrt(item); i++){\r\n                if(item % i === 0 && item != i){\r\n                   isPrime = false;\r\n                }\r\n             }\r\n            if (isPrime === true) {\r\n                primeArray.push(item);\r\n            }\r\n        }\r\n        return primeArray;\r\n    },\r\n\r\n    isPrime: function(number) {\r\n        for (i = 2; i <= Math.sqrt(number); i++){\r\n            if(number % i === 0 && number != i){\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    },\r\n\r\n    shuffle: function(array) {\r\n        for (let i = array.length - 1; i > 0; i--) {\r\n            let j = Math.floor(Math.random() * (i + 1));\r\n            [array[i], array[j]] = [array[j], array[i]];\r\n        }\r\n        return array;\r\n    },\r\n\r\n    count: function(arr, item) {\r\n        let count = 0;\r\n\r\n        for(let i = 0; i < arr.length; i++) {\r\n            if(arr[i] === item) {\r\n                count += 1;\r\n            }\r\n        }\r\n        return count;\r\n    },\r\n    removeDuplicates: function(arr) {\r\n        let uniques = [];\r\n        for (item of arr) {\r\n            if(uniques.indexOf(item) === -1) {\r\n                uniques.push(item);\r\n            }\r\n        }\r\n        return uniques;\r\n    },\r\n    randomInt: function(min, max) {\r\n        return Math.floor(Math.random() * (max - min + 1) + min);\r\n    },\r\n    randomChoice: function(array) {\r\n        let chosenInt = Math.floor(Math.random() * array.length);\r\n        return array[chosenInt];\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// Helper functions\r\n\r\n// Range helper -------------------------------------------------------------------------------\r\nfunction makeArray (firstNumber, secondNumber) {\r\n    let rangeArray = [];\r\n    for (let i = firstNumber; i <= secondNumber; i++) {\r\n        rangeArray.push(i);\r\n    }   \r\n    return rangeArray;\r\n}\r\n\r\nfunction makeReverseArray(firstNumber, secondNumber) {\r\n    let rangeArray = [];\r\n    for (let i = firstNumber; i >= secondNumber; i--) {\r\n        rangeArray.push(i);\r\n    }\r\n    return rangeArray;\r\n}\r\n// ------------------------------------------------------------------------------------------\r\n\r\nmodule.exports = h;","import { randomInt } from 'home-on-the-range';\r\n\r\nclass PreMadeDice {\r\n    constructor(name, sidesOnDice) {\r\n        this.name = name;\r\n        this.sidesOnDice = sidesOnDice;\r\n        this.diceRoll = '???';\r\n    }\r\n\r\n    create() {\r\n        let div = document.createElement('div');\r\n        div.classList.add('text-center', 'created-dice-box');\r\n        let boxName = document.createElement('h4');\r\n        boxName.textContent = this.name;\r\n        let subTitle = document.createElement('p');\r\n        subTitle.textContent = `(${this.sidesOnDice} sided Dice)`;\r\n        let diceArea = document.createElement('h4');\r\n        diceArea.classList.add('dice-area');\r\n        diceArea.textContent = this.diceRoll;\r\n        div.append(boxName);\r\n        div.append(subTitle);\r\n        div.append(diceArea);\r\n        document.querySelector('#dice-box').append(div);\r\n    }\r\n\r\n    rollDice(diceArea) {\r\n        let diceRoll = randomInt(1, this.sidesOnDice);\r\n        diceArea.textContent = diceRoll;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport { PreMadeDice }","import { randomInt } from 'home-on-the-range';\r\nimport { PreMadeDice } from '../../../Dicebox/preMade';\r\n\r\nclass Yahtzee {\r\n    static createDice() {\r\n        let diceArray = ['dicebox1', 'dicebox2', 'dicebox3', 'dicebox4', 'dicebox5'];\r\n        for (let i = 0; i < diceArray.length; i++) {\r\n            diceArray[i] = new PreMadeDice(`dice${i + 1}`, 6);\r\n            diceArray[i].create();\r\n        }\r\n        this.rollDice(diceArray);\r\n    }\r\n\r\n    static rollDice() {\r\n        document.querySelector('#yahtzee-button').addEventListener('click', () => {\r\n            let rolls = document.querySelectorAll('.dice-area');\r\n            for (let roll of rolls) {\r\n                roll.textContent = randomInt(1, 6);\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n\r\nYahtzee.createDice();"]}