{"version":3,"sources":["../node_modules/home-on-the-range/index.js","../Dicebox/dicebox.js","index.js"],"names":["Dicebox","name","sidesOnDice","div","document","createElement","classList","add","deleteButton","textContent","boxName","subTitle","diceArea","rollButton","id","append","querySelector","addEventListener","rollDice","UI","createDeleteListener","clearForm","diceRoll","value","remove","app","createDiceBoxButton","form","Main","e","preventDefault","dicebox","Number","isInteger","create","alert","diceBoxDisplayHandler","formSubmitHandler"],"mappings":"AAAA;AACA;AACA,AEFA;AFGA;AACA;AACA;AACA;ACNA,ADOA;AACA;AACA;AACA,AEPA,IAAMyB,GAAG,GAAG;AFQZ,AEPIC,EAAAA,mBAAmB,EAAEtB,QAAQ,CAACY,aAAT,CAAuB,mBAAvB,CADb;AFSZ,AEPIW,EAAAA,IAAI,EAAEvB,QAAQ,CAACY,aAAT,CAAuB,mBAAvB;AFQV,AEVY,CAAZ;AFWA;AACA,ICbMhB,ACMA4B;AFQN;AACA;ACdI,ADeJ,mBCfgB3B,IAAZ,EAAkBC,WAAlB,EAA+B;AAAA,ADgBnC;AACA;AChBQ,ADiBR,SCjBaD,IAAL,GAAYA,IAAZ;AACA,ADiBR,SCjBaC,WAAL,GAAmBA,WAAnB;AACH,ADiBL;AACA,4CEfmC;AFgBnC,AEhBmC,UACtBwB,mBADsB,GACOD,GADP,CACtBC,mBADsB;AFiBnC,AEjBmC,UACDC,IADC,GACOF,GADP,CACDE,IADC;AFkBnC,AEhBQD,MAAAA,mBAAmB,CAACT,GDHf,aCGL,CAAqC,OAArC,EAA8C,YAAM;ADH/C,ADoBb,AEhBYU,QAAAA,IAAI,CAACrB,SAAL,CAAekB,MAAf,CAAsB,QAAtB;AFiBZ,AEhBYE,QAAAA,mBAAmB,CAACpB,SAApB,CAA8BC,GAA9B,CAAkC,QAAlC;ADJJ,ADqBR,AEhBS,OAHD,GDFIJ,GAAG,GAAGC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAV;AACAF,ADqBR,AEhBK,MDLGA,GAAG,CAACG,SAAJ,CAAcC,GAAd,CAAkB,aAAlB,EAAiC,kBAAjC;AACA,ADqBR,UCrBYC,YAAY,GAAGJ,QAAQ,CAACC,aAAT,CAAuB,IAAvB,CAAnB;AACAG,ADqBR,MCrBQA,YAAY,CAACC,WAAb,GAA2B,GAA3B;AACAD,ADqBR,MCrBQA,YAAY,CAACF,SAAb,CAAuBC,GAAvB,CAA2B,OCIJ,QDJvB,EAA4C,YAA5C,EAA0D,MAA1D,EAAkE,MAAlE;AACA,ADqBR,AElB+B,UDHnBG,ACICgB,ODJM,GAAGtB,QAAQ,CAACC,ACGA,GACWoB,GADX,CAClBC,MDJS,CAAuB,IAAvB,CAAd,OCGuB;ADFvBhB,ADqBR,AEnB+B,MDFvBA,ICG0BiB,GDHnB,CAAClB,ACEe,GACWgB,GADX,CACGE,IDH1B,ACEuB,GDFD,KAAK1B,IAA3B;AACA,ADqBR,AElBQ0B,MAAAA,IDHIhB,ACGA,CAACM,ODHO,GAAGb,MCGf,CAAsB,CDHC,CAACC,MCGxB,EAAgC,KDHjB,CAAuB,GAAvB,CAAf,ACGgCwB,CAAC,EAAI;ADFrClB,ADqBR,AElBYkB,MDHJlB,ECGIkB,CAAC,CAACC,IDHE,CAACrB,SCGL,EDHJ,cAA2B,KAAKP,WAAhC;AACA,ADqBR,AElBY,UDHAU,ECGIF,MDHI,CCGG,EDHAN,CCGGA,ODHK,CAACC,ACGE,CAACW,YDHZ,CAAuB,ACGpB,CAAuB,GDH1B,CAAf,MCGkB,EAAmCO,KAAjD;ADFJX,ADqBR,AElBY,MDHJA,MCGQV,EDHA,CAACO,QCGU,GDHnB,ACGsBL,GDHC,KAAvB,ACG8B,CAACY,aAAT,CAAuB,cAAvB,EAAuCO,KAAzD;ADFJ,ADqBR,AElBY,UDHAV,ECGIkB,OAAO,CDHD,ECGI,CDHD3B,GCGKJ,KDHG,CAACK,UCGR,CAAYK,EDHb,CAAuB,ICGtB,EAAqBsB,EDHtB,CAAjB,GCG6C,CAAC9B,WAAD,CAA3B,CAAd;ADFJW,ADqBR,MCrBQA,UAAU,CAACP,SAAX,CAAqBC,GAArB,CAAyB,KAAzB,EAAgC,aAAhC;AACAM,ADqBR,AEnBY,MDFJA,MCEOmB,IDFG,CAACvB,CCEE,CAACwB,SDFd,ACEO,CAAiBF,EDFC,KCEM,CAAC7B,SDFhC,ECEO,CAAH,EAA0C;ADD9CW,ADqBR,AEnBgBkB,MDFRlB,ICEQkB,MDFE,CAACjB,ACEI,CAACoB,CDFhB,GAAgB,ECER,WDFR;AACA/B,ADqBR,AEnBgBwB,MDFRxB,GAAG,CAACY,ACEIY,IAAI,CAACrB,CDFb,CAAWE,OCEH,CAAeD,GAAf,CDFR,ACE2B,QAAnB;ADDRJ,ADqBR,AEnBgBuB,MDFRvB,GAAG,CAACY,ACEIW,MDFR,CAAWhB,OAAX,KCE2B,CAACJ,SAApB,CAA8BkB,MAA9B,CAAqC,QAArC;ADDRrB,ADqBR,AEnBa,MDFLA,GAAG,ACFC,CDEAY,KCEO,CDFX,CAAWJ,QAAX;AACAR,ADqBR,AEnBgBgC,MDFRhC,GAAG,CAACY,ACEIoB,KAAK,CDFb,ACEc,CDFHvB,QAAX,2CCEa,CAAL;ADDRT,ADqBR,AEnBa,MDFLA,GAAG,CAACY,MAAJ,CAAWF,UAAX;AACAT,ADqBR,AEnBS,MDFDA,CCVA,ODUQ,CAACY,aAAT,CAAuB,WAAvB,EAAoCD,MAApC,CAA2CZ,GAA3C;AACAU,ADqBR,AEnBK,MDFGA,UAAU,CAACI,gBAAX,CAA4B,OAA5B,EAAqC,YAAM;AACvC,ADqBZ,QCrBY,KAAI,CAACC,QAAL,CAAcN,QAAd;AACH,ADqBT,OCvBQ;AAGAO,ADqBR,MCrBQA,EAAE,CAACC,oBAAH,CAAwBZ,YAAxB,EAAsCL,GAAtC;AACAgB,ADqBR,MCrBQA,EAAE,CAACE,SAAH;AACH,ADqBL;AACA,AEnBAO,IAAI,CAACQ,qBAAL;AFoBA,AEnBAR,IAAI,CAACS,iBAAL;AFoBA,6BCtBazB,UAAU;AACf,ADsBR,UCtBYU,QAAQ,GAAG,+BAAU,CAAV,EAAa,KAAKpB,WAAlB,CAAf;AACAU,ADsBR,MCtBQA,QAAQ,CAACH,WAAT,GAAuBa,QAAvB;AACH,ADsBL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IC1BMH;AD2BN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCClCuB;AACfT,ADkCR,MClCQA,OAAO,CAACa,KAAR,GAAgB,EAAhB;AACArB,ADkCR,MClCQA,WAAW,CAACqB,KAAZ,GAAoB,EAApB;AACH,ADkCL;AACA;AACA;AACA,yCCnCgCf,cAAcL,KAAK;AAC3CK,ADmCR,MCnCQA,YAAY,CAACS,gBAAb,CAA8B,OAA9B,EAAuC,YAAM;AACzCd,ADmCZ,QCnCYA,GAAG,CAACqB,MAAJ;AACH,ADmCT,OCrCQ;AAGH,ADmfile":"src.e31bb0bc.js","sourceRoot":"..\\src","sourcesContent":["h = {\r\n    range: function(firstNumber, secondNumber) {\r\n \r\n        if (firstNumber < 0 && secondNumber === undefined) {\r\n            secondNumber = 0;\r\n            return makeArray(firstNumber, secondNumber);\r\n        } \r\n        \r\n        else if (secondNumber === undefined) {\r\n            secondNumber = firstNumber;\r\n            firstNumber = 0;\r\n            return makeArray(firstNumber, secondNumber);\r\n        } \r\n        \r\n        else if (firstNumber <= secondNumber) {\r\n            return makeArray(firstNumber, secondNumber);\r\n        } \r\n        \r\n        else if (firstNumber >= secondNumber) {\r\n            return makeReverseArray(firstNumber, secondNumber);\r\n        }\r\n    \r\n        return rangeArray;\r\n    },\r\n    \r\n    // adds strings and numbers\r\n    add: function(...numbers) {\r\n        let numbersFlattened = numbers.reduce((accumulator, currentValue) => accumulator.concat(currentValue), []);\r\n\r\n        let numbersToBeSummed = numbersFlattened.map((item) => Number(item));\r\n        \r\n    \r\n        let sum = numbersToBeSummed.reduce((accumulator, currentValue) => accumulator + currentValue);\r\n        return sum;\r\n    },\r\n    \r\n    // complete array flatten\r\n    deep: function(...arrays) {\r\n        let levelArray = [];\r\n        for (let i = 0; i < arrays.length; i++) {\r\n            if(!Array.isArray(arrays[i])) {\r\n                levelArray.push(arrays[i]);\r\n                continue;\r\n            }\r\n            let newArray = arrays[i].flat(Infinity);\r\n            levelArray.push(newArray);\r\n        }\r\n        let flatArray = levelArray.flat();\r\n        return flatArray;\r\n    },\r\n\r\n    // \r\n    createFibArray: function(numToReach) {\r\n        let firstNum = BigInt(1);\r\n        let secondNum = BigInt(1);\r\n        let total = 0;\r\n        let fibArray = [];\r\n        let count = 0;\r\n        fibArray.push(BigInt(total));\r\n        fibArray.push(firstNum);\r\n        fibArray.push(secondNum);\r\n        while(true) {\r\n            total = BigInt(firstNum + secondNum);\r\n            if (count < numToReach) {\r\n                fibArray.push(total);\r\n                firstNum = BigInt(secondNum);\r\n                secondNum = BigInt(total);\r\n                count++;\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        return fibArray;\r\n    },\r\n    getPrimeFactors: function(number) {\r\n        let primeArray = [];\r\n        let i = 2;\r\n        while(i < 1000000) {\r\n            if (number % i === 0) {\r\n                primeArray.push(i);\r\n                number /= i;\r\n                i = 2;\r\n            }\r\n            else {\r\n                i++;\r\n            }\r\n        }\r\n        return primeArray;\r\n    },\r\n\r\n    findLargestPrimeFactor: function(number) {\r\n        let primeArray = this.getPrimeFactors(number);\r\n        let largestPrime = Math.max(...primeArray);\r\n        return largestPrime;\r\n    },\r\n\r\n    findSmallestPrimeFactor: function(number) {\r\n        let primeArray = this.getPrimeFactors(number);\r\n        let smallestPrime = Math.min(...primeArray);\r\n        return smallestPrime;\r\n    },\r\n\r\n    numIsPalindrome: function(number) {\r\n        let newNumber = String(number).split('');\r\n        let numToCheck = Math.floor(newNumber.length / 2);\r\n        for (let i = 0; i <= numToCheck; i++) {\r\n            if (newNumber[i] == newNumber[newNumber.length - i - 1]) {\r\n                if (i == numToCheck) {\r\n                    return true;\r\n                }\r\n                continue;\r\n            }\r\n            break;\r\n        }\r\n        return false;\r\n    },\r\n\r\n    findLCM: function(...args) {\r\n        let newArray = this.deep(args);\r\n        let numArray = newArray.map(item => Number(item));\r\n        let found = false;\r\n        let answer = 2;\r\n        while (found === false) {\r\n            found = numArray.every(item => {\r\n                return answer % item === 0;\r\n            });\r\n            if (found === true) return answer;\r\n            answer++;\r\n        }\r\n        return answer;\r\n    },\r\n\r\n    findNthPrime: function(number) {\r\n        let count = 0;\r\n        let rangeArray = h.range(2, 50000000);\r\n        for (let item of rangeArray) {\r\n            let isPrime = true;\r\n            for (i = 2; i <= Math.sqrt(item); i++){\r\n                if(item % i === 0 && item != i){\r\n                   isPrime = false;\r\n                }\r\n             }\r\n            if (isPrime === true) {\r\n                count++;\r\n                if (count === number) {\r\n                    return item;\r\n                }\r\n            }\r\n        }\r\n        return primeArray;\r\n    },\r\n\r\n    getPrimeArray: function(...args) {\r\n        let primeArray = [];\r\n        if (args.length === 1) {\r\n            args[1] = args[0];\r\n            args[0] = 2;\r\n        }\r\n        let rangeArray = h.range(args[0], args[1]);\r\n        for (let item of rangeArray) {\r\n            let isPrime = true;\r\n            for (i = 2; i <= Math.sqrt(item); i++){\r\n                if(item % i === 0 && item != i){\r\n                   isPrime = false;\r\n                }\r\n             }\r\n            if (isPrime === true) {\r\n                primeArray.push(item);\r\n            }\r\n        }\r\n        return primeArray;\r\n    },\r\n\r\n    isPrime: function(number) {\r\n        for (i = 2; i <= Math.sqrt(number); i++){\r\n            if(number % i === 0 && number != i){\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    },\r\n\r\n    shuffle: function(array) {\r\n        for (let i = array.length - 1; i > 0; i--) {\r\n            let j = Math.floor(Math.random() * (i + 1));\r\n            [array[i], array[j]] = [array[j], array[i]];\r\n        }\r\n        return array;\r\n    },\r\n\r\n    count: function(arr, item) {\r\n        let count = 0;\r\n\r\n        for(let i = 0; i < arr.length; i++) {\r\n            if(arr[i] === item) {\r\n                count += 1;\r\n            }\r\n        }\r\n        return count;\r\n    },\r\n    removeDuplicates: function(arr) {\r\n        let uniques = [];\r\n        for (item of arr) {\r\n            if(uniques.indexOf(item) === -1) {\r\n                uniques.push(item);\r\n            }\r\n        }\r\n        return uniques;\r\n    },\r\n    randomInt: function(min, max) {\r\n        return Math.floor(Math.random() * (max - min + 1) + min);\r\n    },\r\n    randomChoice: function(array) {\r\n        let chosenInt = Math.floor(Math.random() * array.length);\r\n        return array[chosenInt];\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// Helper functions\r\n\r\n// Range helper -------------------------------------------------------------------------------\r\nfunction makeArray (firstNumber, secondNumber) {\r\n    let rangeArray = [];\r\n    for (let i = firstNumber; i <= secondNumber; i++) {\r\n        rangeArray.push(i);\r\n    }   \r\n    return rangeArray;\r\n}\r\n\r\nfunction makeReverseArray(firstNumber, secondNumber) {\r\n    let rangeArray = [];\r\n    for (let i = firstNumber; i >= secondNumber; i--) {\r\n        rangeArray.push(i);\r\n    }\r\n    return rangeArray;\r\n}\r\n// ------------------------------------------------------------------------------------------\r\n\r\nmodule.exports = h;","import { randomInt } from 'home-on-the-range';\r\n\r\nclass Dicebox {\r\n    constructor(name, sidesOnDice) {\r\n        this.name = name;\r\n        this.sidesOnDice = sidesOnDice;\r\n    }\r\n\r\n    create() {\r\n        let div = document.createElement('div');\r\n        div.classList.add('text-center', 'created-dice-box');\r\n        let deleteButton = document.createElement('h3');\r\n        deleteButton.textContent = 'X';\r\n        deleteButton.classList.add('delete-button', 'text-right', 'mt-2', 'mr-2');\r\n        let boxName = document.createElement('h4');\r\n        boxName.textContent = this.name;\r\n        let subTitle = document.createElement('p');\r\n        subTitle.textContent = `(${this.sidesOnDice} sided Dice)`;\r\n        let diceArea = document.createElement('h4');\r\n        diceArea.textContent = '???';\r\n        let rollButton = document.createElement('button');\r\n        rollButton.classList.add('btn', 'btn-primary');\r\n        rollButton.textContent = 'Roll the Dice';\r\n        rollButton.id = 'roll-button';\r\n        div.append(deleteButton);\r\n        div.append(boxName);\r\n        div.append(subTitle);\r\n        div.append(diceArea);\r\n        div.append(rollButton);\r\n        document.querySelector('#dice-box').append(div);\r\n        rollButton.addEventListener('click', () => {\r\n            this.rollDice(diceArea);\r\n        });\r\n        UI.createDeleteListener(deleteButton, div);\r\n        UI.clearForm();\r\n    }\r\n\r\n    rollDice(diceArea) {\r\n        let diceRoll = randomInt(1, this.sidesOnDice);\r\n        diceArea.textContent = diceRoll;\r\n    }\r\n}\r\n\r\n\r\nclass UI {\r\n    static clearForm() {\r\n        boxName.value = '';\r\n        sidesOnDice.value = '';\r\n    }\r\n\r\n    static createDeleteListener(deleteButton, div) {\r\n        deleteButton.addEventListener('click', () => {\r\n            div.remove();\r\n        });\r\n    }\r\n    \r\n}\r\n\r\n\r\nexport { Dicebox }","import { Dicebox } from '../Dicebox/dicebox';\r\n\r\n\r\nconst app = {\r\n    createDiceBoxButton: document.querySelector('#dice-init-button'),\r\n    form: document.querySelector('#dice-create-form')\r\n}\r\n\r\nclass Main {\r\n    static diceBoxDisplayHandler() {\r\n        let {createDiceBoxButton, form} = app;\r\n        createDiceBoxButton.addEventListener('click', () => {\r\n            form.classList.remove('d-none');\r\n            createDiceBoxButton.classList.add('d-none');\r\n        })\r\n    }\r\n\r\n    static formSubmitHandler() {\r\n        let {createDiceBoxButton, form} = app;\r\n        form.addEventListener('submit', e => {\r\n            e.preventDefault();\r\n            let boxName = document.querySelector('#boxName').value;\r\n            let sidesOnDice = document.querySelector('#sidesOnDice').value;\r\n            let dicebox = new Dicebox(boxName, Number(sidesOnDice));\r\n            if(Number.isInteger(dicebox.sidesOnDice)) {\r\n                dicebox.create();\r\n                form.classList.add('d-none');\r\n                createDiceBoxButton.classList.remove('d-none');\r\n            } else {\r\n                alert('please enter a valid number of sides for your dice');\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nMain.diceBoxDisplayHandler();\r\nMain.formSubmitHandler();"]}